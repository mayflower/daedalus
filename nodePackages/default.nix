# This file has been generated by node2nix 1.5.1. Do not edit!

{pkgs ? import <nixpkgs> {
    inherit system;
  }, system ? builtins.currentSystem, nodejs ? pkgs."nodejs-6_x"}:

let
  nodeEnv = import ./node-env.nix {
    inherit (pkgs) stdenv python2 utillinux runCommand writeTextFile;
    inherit nodejs;
  };
  nodePackages = (import ./node-packages.nix {
    inherit (pkgs) fetchurl fetchgit;
    inherit nodeEnv;
    globalBuildInputs = with pkgs; [
      nodePackages_6_x.node-gyp
      nodePackages_6_x.node-pre-gyp
      electron
      chromedriver
    ];
    overrides = {
      "websocket@1.0.24" = {
        sha256 = "0cprfhbv7128kq7hknaqx060r4pyz9jrqb0z5ka3hv00mlmpphmm";
      };
    };
  }).pkgs;
  buildPackages = nodePackages // rec {
  #"sha3@1.2.0" = nodePackages."sha3@1.2.0".override (attrs: {
  #  buildInputs = attrs.buildInputs ++ [ pkgs.libuv ];
  #  postPatch = ''
  #    find . -name binding.gyp -exec sed -i 's/node -e/node --preserve-symlinks -e/g' \{\} \;
  #  '';
  #  postBuild = ''
  #    ${pkgs.nodePackages_6_x.node-gyp}/bin/node-gyp rebuild --nodedir \
  #      ${pkgs.nodejs-6_x}
  #  '';
  #});
  #"websocket@1.0.24" = nodePackages."websocket@1.0.24".override (attrs: {
  #  buildInputs = attrs.buildInputs ++ [ pkgs.libuv ];
  #  postPatch = ''
  #    find . -name binding.gyp -exec sed -i 's/node -e/node --preserve-symlinks -e/g' \{\} \;
  #  '';
  #  postBuild = ''
  #    ${pkgs.nodePackages_6_x.node-gyp}/bin/node-gyp rebuild --nodedir \
  #      ${pkgs.nodejs-6_x}
  #  '';
  #});
  #"scrypt@6.0.3" = nodePackages."scrypt@6.0.3".override (attrs: {
  #  buildInputs = attrs.buildInputs ++ [ pkgs.libuv ];
  #  postPatch = ''
  #    find . -name binding.gyp -exec sed -i 's/node -e/node --preserve-symlinks -e/g' \{\} \;
  #  '';
  #  preBuild = ''
  #    npm run preinstall
  #  '';
  #  postBuild = ''
  #    ${pkgs.nodePackages_6_x.node-gyp}/bin/node-gyp rebuild --nodedir \
  #      ${pkgs.nodejs-6_x}
  #  '';
  #});
  #"electron@1.7.11" = nodePackages."electron@1.7.11".override (attrs: {
  #  prePatch = ''
  #      ln -sT ${pkgs.electron}/lib/electron dist
  #      echo -n dist/electron > path.txt
  #  '';
  #});
  #"node-sass@4.7.2" = nodePackages."node-sass@4.7.2".override (attrs: {
  #  buildInputs = attrs.buildInputs ++ [ pkgs.libuv pkgs.libsass ];
  #  postPatch = ''
  #    find . -name binding.gyp -exec sed -i 's/node -e/node --preserve-symlinks -e/g' \{\} \;
  #  '';
  #  postBuild = ''
  #    ${pkgs.nodePackages_6_x.node-gyp}/bin/node-gyp rebuild --nodedir \
  #      ${pkgs.nodejs-6_x}
  #    mkdir -p vendor/linux-x64-48
  #    cp build/Release/binding.node vendor/linux-x64-48
  #  '';
  #});
  #"electron-chromedriver@1.7.1" = nodePackages."electron-chromedriver@1.7.1".override (attrs: {
  #  prePatch = ''
  #  '';
  #});
  #"cross-env@5.1.3" = nodePackages."cross-env@5.1.3".override (attrs: {
  #  postBuild = ''
  #    patchShebangs dist/bin
  #    chmod 755 dist/bin/*
  #  '';
  #});
  #"webpack#3.11.0" = nodePackages."webpack@3.11.0".override (attrs: {
  #  postPatch = ''
  #    sed -i 's/return require(localWebpack);//' bin/webpack.js
  #  '';
  #  postBuild = ''
  #    patchShebangs bin
  #    chmod 755 bin/*
  #  '';
  #});
  "webpack#1.14.0" = nodePackages."webpack@1.14.0".override (attrs: {
    postPatch = ''
      sed -i 's/return require(localWebpack);//' bin/webpack.js
    '';
    #postBuild = ''
    #  patchShebangs bin
    #  chmod 755 bin/*
    #'';
  });
  #"uglify-es@3.3.9" = nodePackages."uglify-es@3.3.9".override (attrs: {
  #  postBuild = ''
  #    patchShebangs bin
  #    chmod 755 bin/uglifyjs
  #  '';
  #});
};
in 
  pkgs.runCommand ("daedalus-0.0.1-node_modules") {} ''
    mkdir -p $out/.bin
    ${pkgs.lib.concatMapStringsSep "\n"
    (dep: ''
      
      echo "linking node dependency ${dep.name}"
      
      local packageName="${dep.packageName}"
            
      if [[ "$packageName" =~ ^@ ]] ; then
        mkdir -p $out/''${packageName%%/*}
      fi
      
      if [[ ! -e "$out/$packageName" ]] ; then
        ln -sT ${dep} "$out/$packageName"
        for bin in $out/$packageName/dist/bin/* ; do
          local target=$out/.bin/$(basename -s .js $bin)
          test -e $target || ln -sT $bin $target
        done
        for bin in $out/$packageName/bin/* ; do
          local target=$out/.bin/$(basename -s .js $bin)
          test -e $target || ln -sT $bin $target
        done
      fi
    '')
    (pkgs.lib.attrValues buildPackages)}
  ''
#ls ../nodePackages/node_modules/*/package.json | xargs -I@ jq -r --arg dir "@" '["ln -sT $(dirname ", $dir, ") ", .name] | add' @ > link.sh && chmod 755 link.sh")"]
#{
  #electron = nodePackages."electron-1.7.11".override (oldAttrs: {
  #  preRebuild = ''
  #    ln -sT ${pkgs.electron}/lib/electron dist
  #    echo -n dist/electron > path.txt
  #  '';
  #});
  #electron-chromedriver = nodePackages."electron-chromedriver-1.7.1".override (oldAttrs: {
  #  preRebuild = ''
  #    mkdir bin
  #    ln -s ${pkgs.chromedriver}/bin/chromedriver bin/chromedriver
  #  '';
  #  dontNpmInstall = true;
  #});
#}
